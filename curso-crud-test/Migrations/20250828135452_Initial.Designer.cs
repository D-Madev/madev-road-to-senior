// <auto-generated />
using CRUD_TEST.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRUD_TEST.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250828135452_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRUD_TEST.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lacteos"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Carniceria"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Verduleria"
                        });
                });

            modelBuilder.Entity("CRUD_TEST.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("CRUD_TEST.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SerialNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SerialNumberId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            Name = "Naranja",
                            Price = 18.399999999999999,
                            SerialNumberId = 3
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Leche",
                            Price = 12.199999999999999,
                            SerialNumberId = 2
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Name = "Asado",
                            Price = 3.5499999999999998,
                            SerialNumberId = 1
                        });
                });

            modelBuilder.Entity("CRUD_TEST.Models.ItemClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemClient");
                });

            modelBuilder.Entity("CRUD_TEST.Models.SerialNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("SerialNumbers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "No sabe lo que esta esta carne.",
                            Name = "SN00001"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lecha del mejor tambo de bs.",
                            Name = "SN00001"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Las naranjas mas sabrosas de todas.",
                            Name = "SN00001"
                        });
                });

            modelBuilder.Entity("CRUD_TEST.Models.Item", b =>
                {
                    b.HasOne("CRUD_TEST.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUD_TEST.Models.SerialNumber", "SerialNumber")
                        .WithMany()
                        .HasForeignKey("SerialNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SerialNumber");
                });

            modelBuilder.Entity("CRUD_TEST.Models.ItemClient", b =>
                {
                    b.HasOne("CRUD_TEST.Models.Client", "Client")
                        .WithMany("ItemClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUD_TEST.Models.Item", "Item")
                        .WithMany("ItemClients")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CRUD_TEST.Models.SerialNumber", b =>
                {
                    b.HasOne("CRUD_TEST.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CRUD_TEST.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CRUD_TEST.Models.Client", b =>
                {
                    b.Navigation("ItemClients");
                });

            modelBuilder.Entity("CRUD_TEST.Models.Item", b =>
                {
                    b.Navigation("ItemClients");
                });
#pragma warning restore 612, 618
        }
    }
}
